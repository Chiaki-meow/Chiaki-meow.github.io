<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="cn"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://chiaki-meow.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://chiaki-meow.github.io/" rel="alternate" type="text/html" hreflang="cn"/><updated>2025-02-19T02:24:55+00:00</updated><id>https://chiaki-meow.github.io/feed.xml</id><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">2025新年祈愿</title><link href="https://chiaki-meow.github.io/blog/2025/thoughts-of-life-2/" rel="alternate" type="text/html" title="2025新年祈愿"/><published>2025-02-18T13:32:13+00:00</published><updated>2025-02-18T13:32:13+00:00</updated><id>https://chiaki-meow.github.io/blog/2025/thoughts-of-life-2</id><content type="html" xml:base="https://chiaki-meow.github.io/blog/2025/thoughts-of-life-2/"><![CDATA[<p>去年匆匆地参考模版搭建了这个个人网站，但是发现持续更新是一件很艰难的事情。我自己总结下来的话可能有如下几个原因：</p> <p>第一，每次在网站上输出内容需要如下的几个步骤：</p> <ul> <li>有一些值得写的事情，预先想好了一个稿子/内容</li> <li>打开vscode/idea，鉴于我平时是一个纯粹的clion用户，开启新的IDE对我来说是一个额外的工作</li> <li>开始打字，打字的过程中还需要优化掉一些口语内容，尤其是我打字很喜欢打括号（）</li> <li>完整的打完一篇文章，不会被其他的事情打断；在打字的同时检查排版，保证文章在网页上可供大家通顺的阅读</li> <li>把md文件push到github上去（没有任何的开销）</li> </ul> <p>但是这些工作对我来说并不是一个，所谓的“SOP”：没有一个list去帮助我明确各种类型的文章，比如笔记、这种奇思妙想等等需要什么架构，主要讲解什么内容……所以就略显复杂。</p> <p>当然，我觉得解决这个问题也并不复杂：以后网站的主要更新会聚焦在编程笔记、个人总结、文娱生活三个方面！分别写一写自己的学习内容、月总结和出去玩等等的体验。感觉这样每个月都会有明确需要更新的内容，应该会让我的更新变得更简单：）</p> <p>第二，我还没有养成一个及时总结或者写技术文章的习惯。对我来说，我觉得技术文章最最重要的一点就是建立个人学习知识库，方便后续自己查询，同时也是方便众多遇到同样问题的同学们查询类似的内容。</p> <p>不过我最近开始复习C++知识点和写新的项目，应该会涉及到很多需要学习的内容，到时候尝试先在Notion上写一份，再copy到这边来！</p> <p>第三，我觉得网站目前和笔记平台的体验区别最大的地方就是，网站有一种再写HTML的美感（）笔记软件会帮你把笔记整理的井井有条，而且可以搭配多种颜色；但是自己在IDE里打字就显得很枯燥，并且插入图片需要不少的操作步骤，感觉很不直观。</p> <p>感觉解决方案就是：要不然把当前的网站替换成传统的笔记网站，要不然搞个插件实现图片的拖拽存储之类的（）虽然后者显得有点大费周章，但感觉是个一劳永逸的办法。</p> <p>好吧，说完为什么不经常更新，接下来应该说说未来规划和期待了！</p> <p>其实很简单，首先就是希望之后可以多多的在网站上更新内容:D，希望更新更多的图形学、C++、实习、校招、生活、旅游等等的信息给大家，并且通过对于网站的建设让我自己顺利毕业、找到理想的工作:)</p> <p>第二个愿望就是希望新的一年可以有一些科研产出！在把本分工作做好之外找更多时间去做一些自己想做的事情:D</p> <p>希望我的愿望可以实现，更希望来博客的每一个同学都能实现自己的愿望。新的一年，天天开心，大家都顺利上岸！</p>]]></content><author><name></name></author><category term="Life"/><category term="DailyLife"/><summary type="html"><![CDATA[新的一年，对这个网站做一个规划，对自己的未来许一个愿！]]></summary></entry><entry><title type="html">Unity中RenderTexture的sRGB问题</title><link href="https://chiaki-meow.github.io/blog/2024/RenderTexture-sRGB/" rel="alternate" type="text/html" title="Unity中RenderTexture的sRGB问题"/><published>2024-11-13T13:32:13+00:00</published><updated>2024-11-13T13:32:13+00:00</updated><id>https://chiaki-meow.github.io/blog/2024/RenderTexture-sRGB</id><content type="html" xml:base="https://chiaki-meow.github.io/blog/2024/RenderTexture-sRGB/"><![CDATA[<p>在Unity里中，如果使用编辑器(Editor)创建的RenderTexture来渲染相机的某个场景的图片，会发现渲染的场景物体下的真实颜色如果是灰色，在RenderTexture都会是更深的颜色，比如黑色。而从这个renderTexture上所导出的图像，比如附着在某个Texture2D上，后导出的PNG/JPG/bytes都会有更深的颜色。</p> <p>项目里的内容不太方便截图，这里选用了一张同样总结该问题的其他post的图片。</p> <p><img src="/assets/img/post/24-11-13-render-texture-srgb/3.png" alt=""/></p> <p>其原因是：在编辑器下的RenderTexture默认是不打开sRGB的，所以其内部存储的颜色是线性的。</p> <p>在这里最简单的解决办法是，在使用编辑器(Editor)创建RenderTexture时，点击有inspector右上角的三个点，把normal模式切换为debug模式。</p> <p><img src="/assets/img/post/24-11-13-render-texture-srgb/1.png" alt=""/></p> <p>然后在RenderTexture的inspector中，勾选sRGB。 <img src="/assets/img/post/24-11-13-render-texture-srgb/2.png" alt=""/></p> <p>当然，另一种办法是不要在编辑器(Editor)里创建RenderTexture，而是在代码中创建RenderTexture，然后在代码中设置RenderTexture的sRGB属性。</p> <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">RenderTexture</span> <span class="n">rt</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">RenderTexture</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">RenderTextureFormat</span><span class="p">.</span><span class="n">ARGB32</span><span class="p">,</span> <span class="n">RenderTextureReadWrite</span><span class="p">.</span><span class="n">sRGB</span><span class="p">);</span>
</code></pre></div></div> <p>这样就可以保证RenderTexture的颜色和Unity内部相机看到的颜色一致了！</p> <p>参考资料：<br/> [1]: https://qiita.com/120byte/items/44df34fd30057f9642b4 <br/> [2]: https://discussions.unity.com/t/writting-to-rendertexture-comes-out-darker/637617 <br/> [3]: https://blog.csdn.net/lrh3025/article/details/102723090</p>]]></content><author><name></name></author><category term="Computer"/><category term="Graphics"/><category term="Unity,"/><category term="Rendering"/><summary type="html"><![CDATA[如果使用Unity的RenderTexture来显示某个相机的内容，会发现相机的颜色和RenderTexture的颜色不一致。这是因为RenderTexture默认不打开sRGB，导致其内部存储的颜色其实是线性的。]]></summary></entry><entry><title type="html">写在所有帖子之前</title><link href="https://chiaki-meow.github.io/blog/2024/thoughts-of-life-1/" rel="alternate" type="text/html" title="写在所有帖子之前"/><published>2024-08-25T13:00:00+00:00</published><updated>2024-08-25T13:00:00+00:00</updated><id>https://chiaki-meow.github.io/blog/2024/thoughts-of-life-1</id><content type="html" xml:base="https://chiaki-meow.github.io/blog/2024/thoughts-of-life-1/"><![CDATA[<p>我在最近突然发现我是一个急功近利的人。发现这点的原因是，我一直在尝试走“捷径”，比如问别人有没有什么好的idea，有没有什么我能帮的上忙的内容；或者是喜欢去草草略过很多网上的教程，打开了很多网站，看到了解决方案就结束了，也不会去非常仔细的刨根问底。<br/> 举个例子！最近刚好在看Unity的URP的后处理的部分。URP既然是“通用渲染管线”，后处理方法就变得高度可自定义化了。高度可自定义化的代价也随之而来：除了本身就需要去完成的后处理Shader，还需要自己手写RenderPass。好吧！如果我不使用URP的话，也许我只需要用OnRenderImage就可以直接实现同样的功能了。:&lt; 鉴于学习URP的困难程度，我换了另一种类似OnRenderImage的方法来实现同样的后处理效果。<br/> 这件事情让我觉得很悲伤，因为我不愿意去花时间学习URP到底是什么，我怎么去写RenderPass。所以我有的时候没找到我的出发点到底是“快速完成任务”还是“学习新的内容”。这个困扰同样摆在我对未来的选择之上：我到底是努力做点research尝试读PhD，还是好好做工程去做工程上的图形学，或者不是图形学，而是能让我开心、看到效果的开发呢。<br/> 好吧，感觉还是有点扯远了。今天又有这种感觉的另一个原因是，看到了一个认识的朋友准备去读PhD。而ta选择的道路和我也不太一样，走的路径也不太一样。我就开始思考，是不是ta走的路才是捷径，而我选错了方向呢:&lt; <br/> 我觉得每当我开始考虑路径是不是错了就会开始焦虑。</p> <p>所以还是不要焦虑，继续往前走吧。 继续加油，天天开心！</p>]]></content><author><name></name></author><category term="Life"/><category term="DailyLife"/><summary type="html"><![CDATA[每天都有新感悟]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://chiaki-meow.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://chiaki-meow.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://chiaki-meow.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://chiaki-meow.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://chiaki-meow.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://chiaki-meow.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>